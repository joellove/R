library(rodbc)
library(RODBC)
install.packages("RODBC")
rs <- odbcConnect(dsn = "asterJoel", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "asterJoel", uid = "beehive", pwd = "beehive")
library(RODBC)
rs <- odbcConnect(dsn = "asterJoel", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
library(ODBC)
library(RODBC)
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
rs <- odbcConnect(dsn = "Aster", uid = "beehive", pwd = "beehive")
fix(rs)
fix(rs)
fix(rs)
rsdata <- sqlQuery(rs, "select rpm_avg from hdrnd.sensor_fleet_yf_spain_summury limit 100", errors=TRUE)
View(rsdata)
rsseries <- ts(rsdata, start=c(1866))
plot.ts(rsseries)
rsseriesforecasts$sse
rsseriesforecasts <- HoltWinters(rsseries, gamma=FALSE)
rsseriesforecasts$SSE
plot(rsseriesforcasts)
plot(rsseriesforecasts)
rsseriesforecasts
rsseriesforecasts$SSE
rsseriesforecasts$SSE
rsseriesforecasts
library(RODBC)
install.packages("RODBC")
install.packages("RODBC")
help(library)
savehistory("C:/Users/JL186064/Desktop/r_aster_sample.Rhistory")
install.packages('KernSmooth')
load('KernSmooth')
library('KernSmooth')
?par
help(par)
library(RODBC)
rs <- odbcConnect(dsn = "AsterR", uid = "beehive", pwd = "beehive")
installed.package("RODBC")
install.package("RODBC")
install.packages("RODBC")
library(RODBC)
rs <- odbcConnect(dsn = "AsterR", uid = "beehive", pwd = "beehive")
dtw_matrix <- sqlQuery(rs, "select *
from dtw.dtw_wafers_pressure_result_pivot
order by timeseriesid", errors=TRUE)
dtw_matrix_num <- dtw_matrix[,1]
dtw_matrix <- sqlQuery(rs, "select *
from dtw.dtw_wafers_pressure_result_pivot
order by timeseriesID", errors=TRUE)
dtw_matrix <- sqlQuery(rs, "select *
from dtw.dtw_wafers_pressure_result_pivot
order by \"timeseriesID\", errors=TRUE)
dtw_matrix <- sqlQuery(rs, "select *
from dtw.dtw_wafers_pressure_result_pivot
order by \"timeseriesID\"", errors=TRUE)
dtw_matrix <- sqlQuery(rs, "select *
from dtw.dtw_wafers_pressure_result_pivot
order by \"timeseriesID\"", errors=TRUE)
View(dtw_matrix)
View(dtw_matrix)
dtw_matrix_num <- dtw_matrix[,1]
dtw_matrix_input <- dtw_matrix[,-1]
View(dtw_matrix_input)
View(dtw_matrix)
dtw_matrix_num <- dtw_matrix[,1]
dtw_matrix_input_d <- as.dist(dtw_matrix_input)
View(dtw_matrix)
?as.dist
?hclust
hc <- hclust(dtw_matrix_input_d)
par(cex=0.3, mar=c(5, 8, 4, 1))
plot(hc, xlab="", ylab="", main="", sub="", axes=FALSE, hang=-1)
par(cex=1)
title(xlab="unique_signal_id", ylab="distance", main="vehicle_speed")
axis(2)
title(xlab="timeseries_seq", ylab="distance", main="Pressure")
axis(2)
par(cex=0.3, mar=c(5, 8, 4, 1))
plot(hc, xlab="", ylab="", main="", sub="", axes=FALSE, hang=-1)
par(cex=1)
title(xlab="timeseries_seq", ylab="distance", main="Pressure")
axis(2)
clustnumber <- cutree(hc, k = 10)
dtw_matrix_cluster <-data.frame(dtw_matrix, clustnumber)
final_table <- cbind(dtw_matrix_num,dtw_matrix_cluster[,78])
write.table(final_table,file="dtw_g_md_o2up1_c10.csv",sep=",",row.names=F)
rect.hclust.nice = function (tree, k = NULL, which = NULL, x = NULL, h = NULL, border = 2,
cluster = NULL,  density = NULL,labels = NULL, ...)
{
if (length(h) > 1 | length(k) > 1)
stop("'k' and 'h' must be a scalar")
if (!is.null(h)) {
if (!is.null(k))
stop("specify exactly one of 'k' and 'h'")
k <- min(which(rev(tree$height) < h))
k <- max(k, 2)
}
else if (is.null(k))
stop("specify exactly one of 'k' and 'h'")
if (k < 2 | k > length(tree$height))
stop(gettextf("k must be between 2 and %d", length(tree$height)),
domain = NA)
if (is.null(cluster))
cluster <- cutree(tree, k = k)
clustab <- table(cluster)[unique(cluster[tree$order])]
m <- c(0, cumsum(clustab))
if (!is.null(x)) {
if (!is.null(which))
stop("specify exactly one of 'which' and 'x'")
which <- x
for (n in 1L:length(x)) which[n] <- max(which(m < x[n]))
}
else if (is.null(which))
which <- 1L:k
if (any(which > k))
stop(gettextf("all elements of 'which' must be between 1 and %d",
k), domain = NA)
border <- rep(border, length.out = length(which))
labels <- rep(labels, length.out = length(which))
retval <- list()
for (n in 1L:length(which)) {
rect(m[which[n]] + 0.66, par("usr")[3L], m[which[n] +
1] + 0.33, mean(rev(tree$height)[(k - 1):k]), border = border[n], col = border[n], density = density, ...)
text((m[which[n]] + m[which[n] + 1]+1)/2, grconvertY(grconvertY(par("usr")[3L],"user","ndc")+0.02,"ndc","user"),labels[n])
retval[[n]] <- which(cluster == as.integer(names(clustab)[which[n]]))
}
invisible(retval)
}
labels.to.identify <- c(1:10)
required.density <- 1 # the density of shading lines, in lines per inch
rect.hclust.nice(hc, k = 10, border='red', labels=labels.to.identify,density=required.density)
labels.to.identify <- c(1:5)
required.density <- 1 # the density of shading lines, in lines per inch
rect.hclust.nice(hc, k = 5, border='red', labels=labels.to.identify,density=required.density)
par(cex=0.3, mar=c(5, 8, 4, 1))
plot(hc, xlab="", ylab="", main="", sub="", axes=FALSE, hang=-1)
par(cex=1)
#변수명 설정
title(xlab="timeseries_seq", ylab="distance", main="Pressure")
axis(2)
#3
labels.to.identify <- c(1:5)
required.density <- 1 # the density of shading lines, in lines per inch
rect.hclust.nice(hc, k = 5, border='red', labels=labels.to.identify,density=required.density)
par(cex=0.3, mar=c(5, 8, 4, 1))
plot(hc, xlab="", ylab="", main="", sub="", axes=FALSE, hang=-1)
par(cex=1)
#변수명 설정
title(xlab="timeseries_seq", ylab="distance", main="Pressure")
axis(2)
#3
labels.to.identify <- c(1:10)
required.density <- 1 # the density of shading lines, in lines per inch
rect.hclust.nice(hc, k = 10, border='red', labels=labels.to.identify,density=required.density)
clustnumber <- cutree(hc, k = 10)
par(cex=0.3, mar=c(5, 8, 4, 1))
plot(hc, xlab="", ylab="", main="", sub="", axes=FALSE, hang=-1)
par(cex=1)
#변수명 설정
title(xlab="timeseries_seq", ylab="distance", main="Pressure")
axis(2)
clustnumber <- cutree(hc, k = 10)
dtw_matrix_cluster <-data.frame(dtw_matrix, clustnumber)
clustnumber <- cutree(hc, k = 10)
rect.hclust(hc, k=10, border="red")
setwd("C:\Users\JL186064\Documents\GitHub\R\coursera\getting&cleaningdata\quiz1")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz1")
communityData$VAL[!is.na(communityData$VAL)
;
communityData <- read.table("./data/communities.csv", sep=",", header=TRUE)
head(communityData)
communityData$VAL
communityData$VAL[!is.na(communityData$VAL) & communityData$VAL==24]
length(communityData$VAL[!is.na(communityData$VAL) & communityData$VAL==24])
?length
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="curl")
list.files("./data")
downloaded <- date()
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="curl")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="curl")
getwd()
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="curl")
download.file(fileURL, destfile=".\\data\\gov_NGAP.xlsx", method="curl")
download.file(fileURL, destfile="data\\gov_NGAP.xlsx", method="curl")
download.file(fileURL, destfile="data/gov_NGAP.xlsx", method="curl")
download.file(fileURL, destfile="C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3\\data\\gov_NGAP.xlsx", method="curl")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="curl")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz1")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/communities.csv", method="curl")
download.file(fileURL, destfile="./data/communities.csv", method="curl")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz1")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./gov_NGAP.xlsx", method="curl")
download.file(fileURL, destfile="gov_NGAP.xlsx", method="curl")
?download.file
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="http")
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="internal")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="internal")
list.files("./data")
downloaded <- date()
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
head(dat)
?read.xlsx
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
rowIndex <- 18:23
colIndx <- 7:15
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
source('~/GitHub/R/coursera/getting&cleaningdata/quiz3/quiz3.R')
install.packages("xlsx")
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="internal")
list.files("./data")
downloaded <- date()
install.packages("xlsx")
library(xlsx)
rowIndex <- 18:23
colIndx <- 7:15
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
head(dat)
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40o
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="internal")
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", method="internal")
list.files("./data")
downloaded <- date()
library(xlsx)
rowIndex <- 18:23
colIndx <- 7:15
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
source('~/GitHub/R/coursera/getting&cleaningdata/quiz3/quiz3.R')
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", mode="w", method="internal")
list.files("./data")
downloaded <- date()
library(xlsx)
rowIndex <- 18:23
colIndx <- 7:15
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
setwd("C:\\Users\\JL186064\\Documents\\GitHub\\R\\coursera\\getting&cleaningdata\\quiz3")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", mode="w", method="internal")
list.files("./data")
downloaded <- date()
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", mode="w", method="internal")
download.file(fileURL, destfile="./data/gov_NGAP.xlsx", mode="w", method="internal")
library(xlsx)
rowIndex <- 18:23
colIndx <- 7:15
dat <- read.xlsx(file="./data/gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
head(dat)
